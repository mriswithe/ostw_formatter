@@grammar::Ostw
@@eol_comments :: /\/\/.*?$/
@@keyword :: If Else While For Rule variables actions conditions event global player End
@@keyword :: conditions event global player End settings modes heroes struct class



start = {root_elements}+ $ ;
root_elements
    =
    | declaration
    | enum
    | import
    | assignment
    | func_call
    | class
    | rule
#    | subroutine
#    | macro
#    | if
#    | switch
    ;

func_call = func: IDENT call: call_types ';' ;


arg = token !'=' ;
kwarg = KEY: IDENT '=' VALUE:token ;
call_types
    =
    | '(' ','.{arg}+ ',' ','.{kwarg}+ ')'
    | '(' ','.{kwarg}+ ')'
    | '(' ','.{arg}+ ')'
    | '(' ')'
    ;
CALL_TYPES = >call_types;
token_stack = '.'.{IDENT}+ ;
token
    =
    | (token_stack:token_stack) call:call_types [token]
    | ('.'.{IDENT})
    | string
    | func_call
    ;
literal_values
    =
    | (&'\d'|&'-') number
    | bool
    | (&'"'|&"'") string
    | &'[' empty_array
    ;
LITERAL_VALUES = >literal_values;
expr_part
    =
    | literal_values
    | math
    | token
    | empty_array
    | assignment
    | expr math_symbol expr
    | func_call
    ;

empty_array = '[' ']' ;
#
#include :: "grammar/import.ebnf"
#include :: "grammar/enum.ebnf"
#include :: "grammar/class.ebnf"
#include :: "grammar/rule.ebnf"
#include :: "grammar/subroutine.ebnf"
#include :: "grammar/macro.ebnf"
#include :: "grammar/variable.ebnf"
#include :: "grammar/base.ebnf"
#include :: "grammar/math.ebnf"