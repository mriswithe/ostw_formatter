@@grammar::Ostw
@@eol_comments :: /\/\/.*?$/
@@keyword :: If Else While For Rule variables actions conditions event global player End
@@keyword :: conditions event global player End settings modes heroes struct class



start = {root_elements}+ $ ;
root_elements
    =
    | declaration
    | enum
    | import
    | assignment
    | token
    | class
    | rule
#    | subroutine
#    | macro
#    | if
#    | switch
    ;

literal_values
    =
    | number
    | bool
    | string
    | empty_array
    ;
LITERAL_VALUES = >literal_values;


empty_array = '[' ']' ;
#
#include :: "grammar/import.ebnf"
#include :: "grammar/enum.ebnf"
#include :: "grammar/class.ebnf"
#include :: "grammar/rule.ebnf"
#include :: "grammar/subroutine.ebnf"
#include :: "grammar/macro.ebnf"
#include :: "grammar/variable.ebnf"
#include :: "grammar/base.ebnf"
#include :: "grammar/math.ebnf"
token = token_complex ;

token_complex = base:token_base r'.'.{children:token_child}* ;
token_base
    =
    | literal_values
    | ident !'('
    | func_call
    ;
token_child
    =
    | func_call
    | ident
    ;
expr
    =
    | token math_symbol expr
    | token
    ;

func_call =  func_name:ident '(' ','.{{args:expr}* {kwargs:kwarg}*}* ')' ;

kwarg = ident '=' expr ;