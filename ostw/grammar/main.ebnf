@@grammar::Ostw
@@eol_comments :: /\/\/.*?$/
@@keyword :: If Else While For Rule variables actions conditions event global player End
@@keyword :: conditions event global player End settings modes heroes struct class enum



start = {root_elements}+ $ ;
root_elements
    =
    | enum
    | ';'.{import}*
    | assignment
    | token
    | class_decl
    | rule
#    | subroutine
#    | macro
#    | if
#    | switch
    ;

literal_values
    =
    | number
    | bool
    | string
    | array
    ;
LITERAL_VALUES = >literal_values;



array = '[' ','.{expr} ']';
token = token_complex ;
func_call = &(ident '(') func_name:ident '(' ~ ','.{{args:expr}* {kwargs:kwarg}*}* ')' ;
index_access = &(ident '[') index_name:ident '[' ~ [index:expr] ']' ;
token_complex = token_base [r'.' r'.'.{token_child}+ ];
token_base
    =
    | literal_values
    | >index_access
    | >func_call
    | ident
    ;
token_child
    =
    | >index_access
    | >func_call
    | ident
    ;
base_expr = (math_symbol)%{token|expr}+ ;
paren_expr = '(' base_expr ')' ;
expr = paren_expr | assignment | base_expr ;
one_expr = expr $ ;


kwarg = ident '=' expr ;
lambda = (','.{expr}) arrow expr ;
#include :: "import.ebnf"
#include :: "enum.ebnf"
#include :: "class.ebnf"
#include :: "rule.ebnf"
#include :: "variable.ebnf"
#include :: "base.ebnf"
#include :: "math.ebnf"
##include :: "struct.ebnf"