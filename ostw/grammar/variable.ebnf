
# declarations
scope
    =
    | 'globalvar' scope: `GLOBAL`
    | 'playervar' scope: `PLAYER`
    | () scope: `None`
    ;
void = 'void';
ARRAY
    =
    |'[]' is_array: `True`
    | () is_array: `False`
    ;
EXTENDED
    =
    | '!' is_extended: `True`
    | () is_extended: `False`
    ;
variable_attributes
    =
    | 'public'
    | 'private'
    | 'protected'
    | 'virtual'
    | 'override'
    | 'abstract'
    | 'static'
    | 'globalvar'
    | 'playervar'
    ;
decl = scope type ARRAY expr EXTENDED ;
assign = assign_symbol expr ;
var_name = expr ARRAY EXTENDED;
declaration
    =
    | scope token_type ARRAY var_name
    | scope expr ARRAY EXTENDED
    | scope token_type ARRAY
    ;

one_decl = @:(declaration [assign]) ';' $;
token_type
    =
    | 'define'
    | expr ARRAY
    ;

arrow = '=' '>';

type
    =
    | '(' ','.{expr}* ')' arrow return:expr
    | expr arrow return:expr
    | expr
    ;

assign_symbol
    =
    | '=' action: `ASSIGN`
    | '+=' action: `ADD`
    | '-=' action: `SUBTRACT`
    | '*=' action: `MULTIPLY`
    | '/=' action: `DIVIDE`
    | '%=' action: `DIVREM` # Better name for this I think, divide and assign remainder
    | '^=' action: `POWER`
    ;
mod_symbol
    =
    | '++' action: `INCREMENT`
    | '--' action: `DECREMENT`
    ;
assignment = expr (assign_symbol expr| mod_symbol) ';' ;




